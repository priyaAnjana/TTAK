<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="1" total="10" passed="8" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-12-21T14:39:24 IST" name="Suite" finished-at="2022-12-21T14:41:58 IST" duration-ms="154071">
    <groups>
    </groups>
    <test started-at="2022-12-21T14:39:24 IST" name="Test" finished-at="2022-12-21T14:41:58 IST" duration-ms="154071">
      <class name="stateSecretaryExecutePageClass.ExecuteLoginPageTestClass">
        <test-method is-config="true" signature="createReport(org.testng.ITestContext)[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:24 IST" name="createReport" finished-at="2022-12-21T14:39:24 IST" duration-ms="31" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@5ff29e8b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createReport -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:24 IST" name="beforeMethod" finished-at="2022-12-21T14:39:29 IST" duration-ms="5470" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLoginPageIsVisibleWhileLaunchingTheApplication()[pri:1, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:29 IST" name="verifyLoginPageIsVisibleWhileLaunchingTheApplication" finished-at="2022-12-21T14:39:31 IST" duration-ms="1830" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [http://qa.ttak.thesmartlive.] but found [http://qa.ttak.thesmartlive.com/]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [http://qa.ttak.thesmartlive.] but found [http://qa.ttak.thesmartlive.com/]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at stateSecretaryExecutePageClass.ExecuteLoginPageTestClass.verifyLoginPageIsVisibleWhileLaunchingTheApplication(ExecuteLoginPageTestClass.java:48)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginPageIsVisibleWhileLaunchingTheApplication -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:32 IST" name="afterMethod" finished-at="2022-12-21T14:39:35 IST" duration-ms="2395" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLoginPageIsVisibleWhileLaunchingTheApplication status=FAILURE method=ExecuteLoginPageTestClass.verifyLoginPageIsVisibleWhileLaunchingTheApplication()[pri:1, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:35 IST" name="beforeMethod" finished-at="2022-12-21T14:39:38 IST" duration-ms="3572" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLoginwithValidUserNameAndValidPassword()[pri:2, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:38 IST" name="verifyLoginwithValidUserNameAndValidPassword" finished-at="2022-12-21T14:39:43 IST" duration-ms="4797" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginwithValidUserNameAndValidPassword -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:43 IST" name="afterMethod" finished-at="2022-12-21T14:39:43 IST" duration-ms="410" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLoginwithValidUserNameAndValidPassword status=SUCCESS method=ExecuteLoginPageTestClass.verifyLoginwithValidUserNameAndValidPassword()[pri:2, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:43 IST" name="beforeMethod" finished-at="2022-12-21T14:39:47 IST" duration-ms="3977" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLoginWithInvalidUsernameAndValidPassword()[pri:3, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:47 IST" name="verifyLoginWithInvalidUsernameAndValidPassword" finished-at="2022-12-21T14:39:50 IST" duration-ms="2554" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithInvalidUsernameAndValidPassword -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:50 IST" name="afterMethod" finished-at="2022-12-21T14:39:50 IST" duration-ms="277" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithInvalidUsernameAndValidPassword status=SUCCESS method=ExecuteLoginPageTestClass.verifyLoginWithInvalidUsernameAndValidPassword()[pri:3, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:50 IST" name="beforeMethod" finished-at="2022-12-21T14:39:54 IST" duration-ms="3511" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLoginwithValidUsernameandInvalidPassword()[pri:4, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:54 IST" name="verifyLoginwithValidUsernameandInvalidPassword" finished-at="2022-12-21T14:39:56 IST" duration-ms="2273" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginwithValidUsernameandInvalidPassword -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:56 IST" name="afterMethod" finished-at="2022-12-21T14:39:56 IST" duration-ms="161" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLoginwithValidUsernameandInvalidPassword status=SUCCESS method=ExecuteLoginPageTestClass.verifyLoginwithValidUsernameandInvalidPassword()[pri:4, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:39:56 IST" name="beforeMethod" finished-at="2022-12-21T14:40:00 IST" duration-ms="3703" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLoginwithInValidUsernameandInvalidPassword()[pri:5, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:40:00 IST" name="verifyLoginwithInValidUsernameandInvalidPassword" finished-at="2022-12-21T14:40:02 IST" duration-ms="2194" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginwithInValidUsernameandInvalidPassword -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:40:02 IST" name="afterMethod" finished-at="2022-12-21T14:40:02 IST" duration-ms="191" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLoginwithInValidUsernameandInvalidPassword status=SUCCESS method=ExecuteLoginPageTestClass.verifyLoginwithInValidUsernameandInvalidPassword()[pri:5, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:40:02 IST" name="beforeMethod" finished-at="2022-12-21T14:40:06 IST" duration-ms="4007" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyDashBoardPageVisibleOrNot()[pri:6, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:40:06 IST" name="verifyDashBoardPageVisibleOrNot" finished-at="2022-12-21T14:40:08 IST" duration-ms="1486" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDashBoardPageVisibleOrNot -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624]" started-at="2022-12-21T14:40:08 IST" name="afterMethod" finished-at="2022-12-21T14:40:08 IST" duration-ms="219" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyDashBoardPageVisibleOrNot status=SUCCESS method=ExecuteLoginPageTestClass.verifyDashBoardPageVisibleOrNot()[pri:6, instance:stateSecretaryExecutePageClass.ExecuteLoginPageTestClass@28cda624] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- stateSecretaryExecutePageClass.ExecuteLoginPageTestClass -->
      <class name="stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6]" started-at="2022-12-21T14:40:08 IST" name="beforeMethod" finished-at="2022-12-21T14:40:11 IST" duration-ms="3431" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyWhetherTheSecretaryCanRegisterNewPlayerOrNot()[pri:1, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6]" started-at="2022-12-21T14:40:11 IST" name="verifyWhetherTheSecretaryCanRegisterNewPlayerOrNot" finished-at="2022-12-21T14:40:45 IST" duration-ms="34019" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyWhetherTheSecretaryCanRegisterNewPlayerOrNot -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6]" started-at="2022-12-21T14:40:45 IST" name="afterMethod" finished-at="2022-12-21T14:40:46 IST" duration-ms="185" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWhetherTheSecretaryCanRegisterNewPlayerOrNot status=SUCCESS method=ExeutePlayerRegistrationTestClass.verifyWhetherTheSecretaryCanRegisterNewPlayerOrNot()[pri:1, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6]" started-at="2022-12-21T14:40:46 IST" name="beforeMethod" finished-at="2022-12-21T14:40:50 IST" duration-ms="4667" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyWhetherTheSecretaryCanEditSavedPlayer()[pri:2, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6]" started-at="2022-12-21T14:40:50 IST" name="verifyWhetherTheSecretaryCanEditSavedPlayer" finished-at="2022-12-21T14:41:31 IST" duration-ms="41080" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyWhetherTheSecretaryCanEditSavedPlayer -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6]" started-at="2022-12-21T14:41:31 IST" name="afterMethod" finished-at="2022-12-21T14:41:32 IST" duration-ms="234" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWhetherTheSecretaryCanEditSavedPlayer status=SUCCESS method=ExeutePlayerRegistrationTestClass.verifyWhetherTheSecretaryCanEditSavedPlayer()[pri:2, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6]" started-at="2022-12-21T14:41:32 IST" name="beforeMethod" finished-at="2022-12-21T14:41:35 IST" duration-ms="3549" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyWhetherTheSecretaryCanDeleteSavedPlayer()[pri:3, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6]" started-at="2022-12-21T14:41:35 IST" name="verifyWhetherTheSecretaryCanDeleteSavedPlayer" finished-at="2022-12-21T14:41:58 IST" duration-ms="22437" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyWhetherTheSecretaryCanDeleteSavedPlayer -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6]" started-at="2022-12-21T14:41:58 IST" name="afterMethod" finished-at="2022-12-21T14:41:58 IST" duration-ms="175" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWhetherTheSecretaryCanDeleteSavedPlayer status=SUCCESS method=ExeutePlayerRegistrationTestClass.verifyWhetherTheSecretaryCanDeleteSavedPlayer()[pri:3, instance:stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass@6933b6c6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- stateSecretaryExecutePageClass.ExeutePlayerRegistrationTestClass -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
